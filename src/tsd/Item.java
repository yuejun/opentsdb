/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.opentsdb.tsd;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Item implements org.apache.thrift.TBase<Item, Item._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Item");

  private static final org.apache.thrift.protocol.TField METRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("metric", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField AGGREGATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregator", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField DOWNSAMPLE_AGG_FIELD_DESC = new org.apache.thrift.protocol.TField("downsample_agg", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField DOWNSAMPLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("downsample_time", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ItemTupleSchemeFactory());
  }

  public String metric; // required
  public Map<String,String> tags; // required
  public byte aggregator; // required
  public byte downsample_agg; // required
  public String downsample_time; // required
  public boolean rate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    METRIC((short)1, "metric"),
    TAGS((short)4, "tags"),
    AGGREGATOR((short)5, "aggregator"),
    DOWNSAMPLE_AGG((short)6, "downsample_agg"),
    DOWNSAMPLE_TIME((short)7, "downsample_time"),
    RATE((short)8, "rate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METRIC
          return METRIC;
        case 4: // TAGS
          return TAGS;
        case 5: // AGGREGATOR
          return AGGREGATOR;
        case 6: // DOWNSAMPLE_AGG
          return DOWNSAMPLE_AGG;
        case 7: // DOWNSAMPLE_TIME
          return DOWNSAMPLE_TIME;
        case 8: // RATE
          return RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGGREGATOR_ISSET_ID = 0;
  private static final int __DOWNSAMPLE_AGG_ISSET_ID = 1;
  private static final int __RATE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METRIC, new org.apache.thrift.meta_data.FieldMetaData("metric", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AGGREGATOR, new org.apache.thrift.meta_data.FieldMetaData("aggregator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DOWNSAMPLE_AGG, new org.apache.thrift.meta_data.FieldMetaData("downsample_agg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DOWNSAMPLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("downsample_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Item.class, metaDataMap);
  }

  public Item() {
  }

  public Item(
    String metric,
    Map<String,String> tags,
    byte aggregator,
    byte downsample_agg,
    String downsample_time,
    boolean rate)
  {
    this();
    this.metric = metric;
    this.tags = tags;
    this.aggregator = aggregator;
    setAggregatorIsSet(true);
    this.downsample_agg = downsample_agg;
    setDownsample_aggIsSet(true);
    this.downsample_time = downsample_time;
    this.rate = rate;
    setRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Item(Item other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetMetric()) {
      this.metric = other.metric;
    }
    if (other.isSetTags()) {
      Map<String,String> __this__tags = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.tags.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__tags_copy_key = other_element_key;

        String __this__tags_copy_value = other_element_value;

        __this__tags.put(__this__tags_copy_key, __this__tags_copy_value);
      }
      this.tags = __this__tags;
    }
    this.aggregator = other.aggregator;
    this.downsample_agg = other.downsample_agg;
    if (other.isSetDownsample_time()) {
      this.downsample_time = other.downsample_time;
    }
    this.rate = other.rate;
  }

  public Item deepCopy() {
    return new Item(this);
  }

  @Override
  public void clear() {
    this.metric = null;
    this.tags = null;
    setAggregatorIsSet(false);
    this.aggregator = 0;
    setDownsample_aggIsSet(false);
    this.downsample_agg = 0;
    this.downsample_time = null;
    setRateIsSet(false);
    this.rate = false;
  }

  public String getMetric() {
    return this.metric;
  }

  public Item setMetric(String metric) {
    this.metric = metric;
    return this;
  }

  public void unsetMetric() {
    this.metric = null;
  }

  /** Returns true if field metric is set (has been assigned a value) and false otherwise */
  public boolean isSetMetric() {
    return this.metric != null;
  }

  public void setMetricIsSet(boolean value) {
    if (!value) {
      this.metric = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(String key, String val) {
    if (this.tags == null) {
      this.tags = new HashMap<String,String>();
    }
    this.tags.put(key, val);
  }

  public Map<String,String> getTags() {
    return this.tags;
  }

  public Item setTags(Map<String,String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public byte getAggregator() {
    return this.aggregator;
  }

  public Item setAggregator(byte aggregator) {
    this.aggregator = aggregator;
    setAggregatorIsSet(true);
    return this;
  }

  public void unsetAggregator() {
    __isset_bit_vector.clear(__AGGREGATOR_ISSET_ID);
  }

  /** Returns true if field aggregator is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregator() {
    return __isset_bit_vector.get(__AGGREGATOR_ISSET_ID);
  }

  public void setAggregatorIsSet(boolean value) {
    __isset_bit_vector.set(__AGGREGATOR_ISSET_ID, value);
  }

  public byte getDownsample_agg() {
    return this.downsample_agg;
  }

  public Item setDownsample_agg(byte downsample_agg) {
    this.downsample_agg = downsample_agg;
    setDownsample_aggIsSet(true);
    return this;
  }

  public void unsetDownsample_agg() {
    __isset_bit_vector.clear(__DOWNSAMPLE_AGG_ISSET_ID);
  }

  /** Returns true if field downsample_agg is set (has been assigned a value) and false otherwise */
  public boolean isSetDownsample_agg() {
    return __isset_bit_vector.get(__DOWNSAMPLE_AGG_ISSET_ID);
  }

  public void setDownsample_aggIsSet(boolean value) {
    __isset_bit_vector.set(__DOWNSAMPLE_AGG_ISSET_ID, value);
  }

  public String getDownsample_time() {
    return this.downsample_time;
  }

  public Item setDownsample_time(String downsample_time) {
    this.downsample_time = downsample_time;
    return this;
  }

  public void unsetDownsample_time() {
    this.downsample_time = null;
  }

  /** Returns true if field downsample_time is set (has been assigned a value) and false otherwise */
  public boolean isSetDownsample_time() {
    return this.downsample_time != null;
  }

  public void setDownsample_timeIsSet(boolean value) {
    if (!value) {
      this.downsample_time = null;
    }
  }

  public boolean isRate() {
    return this.rate;
  }

  public Item setRate(boolean rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bit_vector.clear(__RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return __isset_bit_vector.get(__RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bit_vector.set(__RATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case METRIC:
      if (value == null) {
        unsetMetric();
      } else {
        setMetric((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Map<String,String>)value);
      }
      break;

    case AGGREGATOR:
      if (value == null) {
        unsetAggregator();
      } else {
        setAggregator((Byte)value);
      }
      break;

    case DOWNSAMPLE_AGG:
      if (value == null) {
        unsetDownsample_agg();
      } else {
        setDownsample_agg((Byte)value);
      }
      break;

    case DOWNSAMPLE_TIME:
      if (value == null) {
        unsetDownsample_time();
      } else {
        setDownsample_time((String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case METRIC:
      return getMetric();

    case TAGS:
      return getTags();

    case AGGREGATOR:
      return Byte.valueOf(getAggregator());

    case DOWNSAMPLE_AGG:
      return Byte.valueOf(getDownsample_agg());

    case DOWNSAMPLE_TIME:
      return getDownsample_time();

    case RATE:
      return Boolean.valueOf(isRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case METRIC:
      return isSetMetric();
    case TAGS:
      return isSetTags();
    case AGGREGATOR:
      return isSetAggregator();
    case DOWNSAMPLE_AGG:
      return isSetDownsample_agg();
    case DOWNSAMPLE_TIME:
      return isSetDownsample_time();
    case RATE:
      return isSetRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Item)
      return this.equals((Item)that);
    return false;
  }

  public boolean equals(Item that) {
    if (that == null)
      return false;

    boolean this_present_metric = true && this.isSetMetric();
    boolean that_present_metric = true && that.isSetMetric();
    if (this_present_metric || that_present_metric) {
      if (!(this_present_metric && that_present_metric))
        return false;
      if (!this.metric.equals(that.metric))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_aggregator = true;
    boolean that_present_aggregator = true;
    if (this_present_aggregator || that_present_aggregator) {
      if (!(this_present_aggregator && that_present_aggregator))
        return false;
      if (this.aggregator != that.aggregator)
        return false;
    }

    boolean this_present_downsample_agg = true;
    boolean that_present_downsample_agg = true;
    if (this_present_downsample_agg || that_present_downsample_agg) {
      if (!(this_present_downsample_agg && that_present_downsample_agg))
        return false;
      if (this.downsample_agg != that.downsample_agg)
        return false;
    }

    boolean this_present_downsample_time = true && this.isSetDownsample_time();
    boolean that_present_downsample_time = true && that.isSetDownsample_time();
    if (this_present_downsample_time || that_present_downsample_time) {
      if (!(this_present_downsample_time && that_present_downsample_time))
        return false;
      if (!this.downsample_time.equals(that.downsample_time))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Item other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Item typedOther = (Item)other;

    lastComparison = Boolean.valueOf(isSetMetric()).compareTo(typedOther.isSetMetric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metric, typedOther.metric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, typedOther.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregator()).compareTo(typedOther.isSetAggregator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregator, typedOther.aggregator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownsample_agg()).compareTo(typedOther.isSetDownsample_agg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownsample_agg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downsample_agg, typedOther.downsample_agg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownsample_time()).compareTo(typedOther.isSetDownsample_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownsample_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downsample_time, typedOther.downsample_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(typedOther.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, typedOther.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Item(");
    boolean first = true;

    sb.append("metric:");
    if (this.metric == null) {
      sb.append("null");
    } else {
      sb.append(this.metric);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregator:");
    sb.append(this.aggregator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downsample_agg:");
    sb.append(this.downsample_agg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downsample_time:");
    if (this.downsample_time == null) {
      sb.append("null");
    } else {
      sb.append(this.downsample_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ItemStandardSchemeFactory implements SchemeFactory {
    public ItemStandardScheme getScheme() {
      return new ItemStandardScheme();
    }
  }

  private static class ItemStandardScheme extends StandardScheme<Item> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Item struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METRIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metric = iprot.readString();
              struct.setMetricIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.tags = new HashMap<String,String>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12; // required
                  String _val13; // required
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.tags.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AGGREGATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.aggregator = iprot.readByte();
              struct.setAggregatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOWNSAMPLE_AGG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.downsample_agg = iprot.readByte();
              struct.setDownsample_aggIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOWNSAMPLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downsample_time = iprot.readString();
              struct.setDownsample_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rate = iprot.readBool();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Item struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metric != null) {
        oprot.writeFieldBegin(METRIC_FIELD_DESC);
        oprot.writeString(struct.metric);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (Map.Entry<String, String> _iter14 : struct.tags.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGGREGATOR_FIELD_DESC);
      oprot.writeByte(struct.aggregator);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOWNSAMPLE_AGG_FIELD_DESC);
      oprot.writeByte(struct.downsample_agg);
      oprot.writeFieldEnd();
      if (struct.downsample_time != null) {
        oprot.writeFieldBegin(DOWNSAMPLE_TIME_FIELD_DESC);
        oprot.writeString(struct.downsample_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeBool(struct.rate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ItemTupleSchemeFactory implements SchemeFactory {
    public ItemTupleScheme getScheme() {
      return new ItemTupleScheme();
    }
  }

  private static class ItemTupleScheme extends TupleScheme<Item> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Item struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMetric()) {
        optionals.set(0);
      }
      if (struct.isSetTags()) {
        optionals.set(1);
      }
      if (struct.isSetAggregator()) {
        optionals.set(2);
      }
      if (struct.isSetDownsample_agg()) {
        optionals.set(3);
      }
      if (struct.isSetDownsample_time()) {
        optionals.set(4);
      }
      if (struct.isSetRate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMetric()) {
        oprot.writeString(struct.metric);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (Map.Entry<String, String> _iter15 : struct.tags.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetAggregator()) {
        oprot.writeByte(struct.aggregator);
      }
      if (struct.isSetDownsample_agg()) {
        oprot.writeByte(struct.downsample_agg);
      }
      if (struct.isSetDownsample_time()) {
        oprot.writeString(struct.downsample_time);
      }
      if (struct.isSetRate()) {
        oprot.writeBool(struct.rate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Item struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.metric = iprot.readString();
        struct.setMetricIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18; // required
            String _val19; // required
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.tags.put(_key18, _val19);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aggregator = iprot.readByte();
        struct.setAggregatorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.downsample_agg = iprot.readByte();
        struct.setDownsample_aggIsSet(true);
      }
      if (incoming.get(4)) {
        struct.downsample_time = iprot.readString();
        struct.setDownsample_timeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rate = iprot.readBool();
        struct.setRateIsSet(true);
      }
    }
  }

}

